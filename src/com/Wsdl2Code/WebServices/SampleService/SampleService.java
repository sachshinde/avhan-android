package com.Wsdl2Code.WebServices.SampleService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.2
//
// Date Of Creation: 2/20/2013 11:16:36 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.SampleService.WS_Enums.*;
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.linphone.assistant.AssistantActivity;

import android.os.AsyncTask;

public class SampleService {
    
   /* public String NAMESPACE ="http://Wsdl2CodeTestService/";
    public String url="http://www.wsdl2code.com/sampleservice.asmx";
    public int timeOut = 60000;
    public AssistantActivity eventHandler;
    public SoapProtocolVersion soapVersion;
    
    
    
    public SampleService(AssistantActivity assistantActivity)
    {
        this.eventHandler = assistantActivity;
    }
    public SampleService(AssistantActivity eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public SampleService(AssistantActivity eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void HelloWorldAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        HelloWorldAsync(null);
    }
    
    public void HelloWorldAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return HelloWorld(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("HelloWorld", result);
                }
            }
        }.execute();
    }
    
    public String HelloWorld(){
        return HelloWorld(null);
    }
    
    public String HelloWorld(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","HelloWorld");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/HelloWorld", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/HelloWorld", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("HelloWorldResult"))
            {
                Object obj = result.getProperty("HelloWorldResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                    SoapPrimitive j =(SoapPrimitive) result.getProperty("HelloWorldResult");
                    String resultVariable = j.toString();
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetByteArrayAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetByteArrayAsync(null);
    }
    
    public void GetByteArrayAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorByte>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorByte doInBackground(Void... params) {
                return GetByteArray(headers);
            }
            @Override
            protected void onPostExecute(VectorByte result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetByteArray", result);
                }
            }
        }.execute();
    }
    
    public VectorByte GetByteArray(){
        return GetByteArray(null);
    }
    
    public VectorByte GetByteArray(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetByteArray");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetByteArray", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetByteArray", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetByteArrayResult"))
            {
                SoapPrimitive j = (SoapPrimitive)result.getProperty("GetByteArrayResult");
                VectorByte resultVariable = new VectorByte(j);
                return resultVariable;
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetBackByteArrayAsync(VectorByte data) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetBackByteArrayAsync(data, null);
    }
    
    public void GetBackByteArrayAsync(final VectorByte data,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorByte>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorByte doInBackground(Void... params) {
                return GetBackByteArray(data, headers);
            }
            @Override
            protected void onPostExecute(VectorByte result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetBackByteArray", result);
                }
            }
        }.execute();
    }
    
    public VectorByte GetBackByteArray(VectorByte data){
        return GetBackByteArray(data, null);
    }
    
    public VectorByte GetBackByteArray(VectorByte data,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetBackByteArray");
        soapReq.addProperty("data",data.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetBackByteArray", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetBackByteArray", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetBackByteArrayResult"))
            {
                SoapPrimitive j = (SoapPrimitive)result.getProperty("GetBackByteArrayResult");
                VectorByte resultVariable = new VectorByte(j);
                return resultVariable;
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ServiceSampleAsync(Request req) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ServiceSampleAsync(req, null);
    }
    
    public void ServiceSampleAsync(final Request req,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Response>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Response doInBackground(Void... params) {
                return ServiceSample(req, headers);
            }
            @Override
            protected void onPostExecute(Response result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ServiceSample", result);
                }
            }
        }.execute();
    }
    
    public Response ServiceSample(Request req){
        return ServiceSample(req, null);
    }
    
    public Response ServiceSample(Request req,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","ServiceSample");
        soapEnvelope.addMapping("http://Wsdl2CodeTestService/","req",new Request().getClass());
        soapReq.addProperty("req",req);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/ServiceSample", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/ServiceSample", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("ServiceSampleResult"))
            {
                SoapObject j = (SoapObject)result.getProperty("ServiceSampleResult");
                Response resultVariable =  new Response (j);
                return resultVariable;
                
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getListStringsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListStringsAsync(null);
    }
    
    public void getListStringsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorString>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorString doInBackground(Void... params) {
                return getListStrings(headers);
            }
            @Override
            protected void onPostExecute(VectorString result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListStrings", result);
                }
            }
        }.execute();
    }
    
    public VectorString getListStrings(){
        return getListStrings(null);
    }
    
    public VectorString getListStrings(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","getListStrings");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/getListStrings", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/getListStrings", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("getListStringsResult"))
            {
                SoapObject j = (SoapObject)result.getProperty("getListStringsResult");
                VectorString resultVariable = new VectorString(j);
                return resultVariable;
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetListOfCustomObjectAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetListOfCustomObjectAsync(null);
    }
    
    public void GetListOfCustomObjectAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorWSPerson>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorWSPerson doInBackground(Void... params) {
                return GetListOfCustomObject(headers);
            }
            @Override
            protected void onPostExecute(VectorWSPerson result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetListOfCustomObject", result);
                }
            }
        }.execute();
    }
    
    public VectorWSPerson GetListOfCustomObject(){
        return GetListOfCustomObject(null);
    }
    
    public VectorWSPerson GetListOfCustomObject(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetListOfCustomObject");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetListOfCustomObject", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetListOfCustomObject", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetListOfCustomObjectResult"))
            {
                SoapObject j = (SoapObject)result.getProperty("GetListOfCustomObjectResult");
                VectorWSPerson resultVariable = new VectorWSPerson(j);
                return resultVariable;
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetStringAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStringAsync(null);
    }
    
    public void GetStringAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetString(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetString", result);
                }
            }
        }.execute();
    }
    
    public String GetString(){
        return GetString(null);
    }
    
    public String GetString(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetString");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetString", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetString", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetStringResult"))
            {
                Object obj = result.getProperty("GetStringResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                    SoapPrimitive j =(SoapPrimitive) result.getProperty("GetStringResult");
                    String resultVariable = j.toString();
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetInt32Async() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetInt32Async(null);
    }
    
    public void GetInt32Async(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return GetInt32(headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetInt32", result);
                }
            }
        }.execute();
    }
    
    public int GetInt32(){
        return GetInt32(null);
    }
    
    public int GetInt32(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetInt32");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetInt32", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetInt32", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetInt32Result"))
            {
                Object obj = result.getProperty("GetInt32Result");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                    SoapPrimitive j =(SoapPrimitive) result.getProperty("GetInt32Result");
                    int resultVariable = Integer.parseInt(j.toString());
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void GetInt16Async() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetInt16Async(null);
    }
    
    public void GetInt16Async(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return GetInt16(headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetInt16", result);
                }
            }
        }.execute();
    }
    
    public int GetInt16(){
        return GetInt16(null);
    }
    
    public int GetInt16(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetInt16");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetInt16", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetInt16", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetInt16Result"))
            {
                Object obj = result.getProperty("GetInt16Result");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                    SoapPrimitive j =(SoapPrimitive) result.getProperty("GetInt16Result");
                    int resultVariable = Integer.parseInt(j.toString());
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void GetInt64Async() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetInt64Async(null);
    }
    
    public void GetInt64Async(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return GetInt64(headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetInt64", result);
                }
            }
        }.execute();
    }
    
    public long GetInt64(){
        return GetInt64(null);
    }
    
    public long GetInt64(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetInt64");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetInt64", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetInt64", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetInt64Result"))
            {
                Object obj = result.getProperty("GetInt64Result");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                    SoapPrimitive j =(SoapPrimitive) result.getProperty("GetInt64Result");
                    long resultVariable = Long.parseLong(j.toString());
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void GetDoubleAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetDoubleAsync(null);
    }
    
    public void GetDoubleAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return GetDouble(headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetDouble", result);
                }
            }
        }.execute();
    }
    
    public double GetDouble(){
        return GetDouble(null);
    }
    
    public double GetDouble(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetDouble");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetDouble", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetDouble", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetDoubleResult"))
            {
                Object obj = result.getProperty("GetDoubleResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                    SoapPrimitive j =(SoapPrimitive) result.getProperty("GetDoubleResult");
                    double resultVariable = Double.parseDouble(j.toString());
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1.0;
    }
    
    public void GetLongAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLongAsync(null);
    }
    
    public void GetLongAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return GetLong(headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetLong", result);
                }
            }
        }.execute();
    }
    
    public long GetLong(){
        return GetLong(null);
    }
    
    public long GetLong(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetLong");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetLong", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetLong", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetLongResult"))
            {
                Object obj = result.getProperty("GetLongResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                    SoapPrimitive j =(SoapPrimitive) result.getProperty("GetLongResult");
                    long resultVariable = Long.parseLong(j.toString());
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void GetPersonAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetPersonAsync(null);
    }
    
    public void GetPersonAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, WSPerson>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected WSPerson doInBackground(Void... params) {
                return GetPerson(headers);
            }
            @Override
            protected void onPostExecute(WSPerson result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetPerson", result);
                }
            }
        }.execute();
    }
    
    public WSPerson GetPerson(){
        return GetPerson(null);
    }
    
    public WSPerson GetPerson(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetPerson");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetPerson", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetPerson", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetPersonResult"))
            {
                SoapObject j = (SoapObject)result.getProperty("GetPersonResult");
                WSPerson resultVariable =  new WSPerson (j);
                return resultVariable;
                
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetEnumAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetEnumAsync(null);
    }
    
    public void GetEnumAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, TestEnum>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected TestEnum doInBackground(Void... params) {
                return GetEnum(headers);
            }
            @Override
            protected void onPostExecute(TestEnum result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetEnum", result);
                }
            }
        }.execute();
    }
    
    public TestEnum GetEnum(){
        return GetEnum(null);
    }
    
    public TestEnum GetEnum(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetEnum");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetEnum", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetEnum", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("GetEnumResult"))
            {
                Object obj = result.getProperty("GetEnumResult");
                if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                    SoapPrimitive j =(SoapPrimitive) result.getProperty("GetEnumResult");
                    TestEnum resultVariable = TestEnum.fromString(j.toString());
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetVoidAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetVoidAsync(null);
    }
    
    public void GetVoidAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                GetVoid(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetVoid", result);
                }
            }
        }.execute();
    }
    
    public void GetVoid(){
        GetVoid(null);
    }
    
    public void GetVoid(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","GetVoid");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/GetVoid", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/GetVoid", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void sendEnumAsync(TestEnum enum1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendEnumAsync(enum1, null);
    }
    
    public void sendEnumAsync(final TestEnum enum1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return sendEnum(enum1, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendEnum", result);
                }
            }
        }.execute();
    }
    
    public String sendEnum(TestEnum enum1){
        return sendEnum(enum1, null);
    }
    
    public String sendEnum(TestEnum enum1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","sendEnum");
        soapReq.addProperty("enum1",enum1.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/sendEnum", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/sendEnum", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("sendEnumResult"))
            {
                Object obj = result.getProperty("sendEnumResult");
                if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                    SoapPrimitive j =(SoapPrimitive) result.getProperty("sendEnumResult");
                    String resultVariable = j.toString();
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getEnumAsync(TestEnum enum2) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getEnumAsync(enum2, null);
    }
    
    public void getEnumAsync(final TestEnum enum2,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, TestEnum>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected TestEnum doInBackground(Void... params) {
                return getEnum(enum2, headers);
            }
            @Override
            protected void onPostExecute(TestEnum result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getEnum", result);
                }
            }
        }.execute();
    }
    
    public TestEnum getEnum(TestEnum enum2){
        return getEnum(enum2, null);
    }
    
    public TestEnum getEnum(TestEnum enum2,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Wsdl2CodeTestService/","getEnum");
        soapReq.addProperty("enum2",enum2.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Wsdl2CodeTestService/getEnum", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Wsdl2CodeTestService/getEnum", soapEnvelope);
            }
            SoapObject result=(SoapObject)soapEnvelope.bodyIn;
            if (result.hasProperty("getEnumResult"))
            {
                Object obj = result.getProperty("getEnumResult");
                if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                    SoapPrimitive j =(SoapPrimitive) result.getProperty("getEnumResult");
                    TestEnum resultVariable = TestEnum.fromString(j.toString());
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
*/}
